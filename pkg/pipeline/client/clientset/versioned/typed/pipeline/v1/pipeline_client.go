/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	serializer "k8s.io/apimachinery/pkg/runtime/serializer"
	rest "k8s.io/client-go/rest"

	"github.com/Azure/brigade/pkg/pipeline/client/clientset/versioned/scheme"
	v1 "github.com/Azure/brigade/pkg/pipeline/v1"
)

<<<<<<< HEAD
<<<<<<< HEAD
type PipelineV1Interface interface {
	RESTClient() rest.Interface
	PipelinesGetter
<<<<<<< HEAD
	PipelineComponentsGetter
	PipelineDefinitionsGetter
}

// PipelineV1Client is used to interact with features provided by the pipeline.brigade.sh group.
type PipelineV1Client struct {
	restClient rest.Interface
}

func (c *PipelineV1Client) Pipelines(namespace string) PipelineInterface {
	return newPipelines(c, namespace)
}

func (c *PipelineV1Client) PipelineComponents(namespace string) PipelineComponentInterface {
	return newPipelineComponents(c, namespace)
}

func (c *PipelineV1Client) PipelineDefinitions(namespace string) PipelineDefinitionInterface {
	return newPipelineDefinitions(c, namespace)
}

// NewForConfig creates a new PipelineV1Client for the given config.
func NewForConfig(c *rest.Config) (*PipelineV1Client, error) {
=======
type RadixV1Interface interface {
=======
type PipelineV1Interface interface {
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
	RESTClient() rest.Interface
=======
>>>>>>> 9bf0216... more work on pipeline types
	PipelineComponentsGetter
	PipelineDefinitionsGetter
}

// PipelineV1Client is used to interact with features provided by the pipeline.brigade.sh group.
type PipelineV1Client struct {
	restClient rest.Interface
}

func (c *PipelineV1Client) Pipelines(namespace string) PipelineInterface {
	return newPipelines(c, namespace)
}

func (c *PipelineV1Client) PipelineComponents(namespace string) PipelineComponentInterface {
	return newPipelineComponents(c, namespace)
}

<<<<<<< HEAD
// NewForConfig creates a new RadixV1Client for the given config.
func NewForConfig(c *rest.Config) (*RadixV1Client, error) {
>>>>>>> 0d0313d... added crd types
=======
func (c *PipelineV1Client) PipelineDefinitions(namespace string) PipelineDefinitionInterface {
	return newPipelineDefinitions(c, namespace)
}

// NewForConfig creates a new PipelineV1Client for the given config.
func NewForConfig(c *rest.Config) (*PipelineV1Client, error) {
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
<<<<<<< HEAD
<<<<<<< HEAD
	return &PipelineV1Client{client}, nil
}

// NewForConfigOrDie creates a new PipelineV1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *PipelineV1Client {
=======
	return &RadixV1Client{client}, nil
=======
	return &PipelineV1Client{client}, nil
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
}

// NewForConfigOrDie creates a new PipelineV1Client for the given config and
// panics if there is an error in the config.
<<<<<<< HEAD
func NewForConfigOrDie(c *rest.Config) *RadixV1Client {
>>>>>>> 0d0313d... added crd types
=======
func NewForConfigOrDie(c *rest.Config) *PipelineV1Client {
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

<<<<<<< HEAD
<<<<<<< HEAD
// New creates a new PipelineV1Client for the given RESTClient.
func New(c rest.Interface) *PipelineV1Client {
	return &PipelineV1Client{c}
=======
// New creates a new RadixV1Client for the given RESTClient.
func New(c rest.Interface) *RadixV1Client {
	return &RadixV1Client{c}
>>>>>>> 0d0313d... added crd types
=======
// New creates a new PipelineV1Client for the given RESTClient.
func New(c rest.Interface) *PipelineV1Client {
	return &PipelineV1Client{c}
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
<<<<<<< HEAD
<<<<<<< HEAD
func (c *PipelineV1Client) RESTClient() rest.Interface {
=======
func (c *RadixV1Client) RESTClient() rest.Interface {
>>>>>>> 0d0313d... added crd types
=======
func (c *PipelineV1Client) RESTClient() rest.Interface {
>>>>>>> ccd1e53... started on brig pipeline functionality. more types work.
	if c == nil {
		return nil
	}
	return c.restClient
}
