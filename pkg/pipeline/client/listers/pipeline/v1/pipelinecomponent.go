/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Azure/brigade/pkg/pipeline/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineComponentLister helps list PipelineComponents.
type PipelineComponentLister interface {
	// List lists all PipelineComponents in the indexer.
	List(selector labels.Selector) (ret []*v1.PipelineComponent, err error)
	// PipelineComponents returns an object that can list and get PipelineComponents.
	PipelineComponents(namespace string) PipelineComponentNamespaceLister
	PipelineComponentListerExpansion
}

// pipelineComponentLister implements the PipelineComponentLister interface.
type pipelineComponentLister struct {
	indexer cache.Indexer
}

// NewPipelineComponentLister returns a new PipelineComponentLister.
func NewPipelineComponentLister(indexer cache.Indexer) PipelineComponentLister {
	return &pipelineComponentLister{indexer: indexer}
}

// List lists all PipelineComponents in the indexer.
func (s *pipelineComponentLister) List(selector labels.Selector) (ret []*v1.PipelineComponent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineComponent))
	})
	return ret, err
}

// PipelineComponents returns an object that can list and get PipelineComponents.
func (s *pipelineComponentLister) PipelineComponents(namespace string) PipelineComponentNamespaceLister {
	return pipelineComponentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineComponentNamespaceLister helps list and get PipelineComponents.
type PipelineComponentNamespaceLister interface {
	// List lists all PipelineComponents in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PipelineComponent, err error)
	// Get retrieves the PipelineComponent from the indexer for a given namespace and name.
	Get(name string) (*v1.PipelineComponent, error)
	PipelineComponentNamespaceListerExpansion
}

// pipelineComponentNamespaceLister implements the PipelineComponentNamespaceLister
// interface.
type pipelineComponentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineComponents in the indexer for a given namespace.
func (s pipelineComponentNamespaceLister) List(selector labels.Selector) (ret []*v1.PipelineComponent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineComponent))
	})
	return ret, err
}

// Get retrieves the PipelineComponent from the indexer for a given namespace and name.
func (s pipelineComponentNamespaceLister) Get(name string) (*v1.PipelineComponent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("pipelinecomponent"), name)
	}
	return obj.(*v1.PipelineComponent), nil
}
