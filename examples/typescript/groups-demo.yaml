# yaml-language-server: $schema=https://raw.githubusercontent.com/brigadecore/brigade/v2/v2/apiserver/schemas/project.json
apiVersion: brigade.sh/v2-alpha.1
kind: Project
metadata:
  id: groups-demo
description: A project that demonstrates compositions of serial and concurrent job groups
spec:
  workerTemplate:
    logLevel: DEBUG
    defaultConfigFiles:
      brigade.ts: |-
        import { events, Job, SerialGroup, ConcurrentGroup } from "@brigadecore/brigadier"

        events.on("github.com/brigadecore/brigade/cli", "exec", async event => {
          let job1 = new Job("job-1", "debian:latest", event)
          job1.primaryContainer.command = ["echo"]
          job1.primaryContainer.arguments = ["I'm job 1!"]

          let job2 = new Job("job-2", "debian:latest", event)
          job2.primaryContainer.command = ["echo"]
          job2.primaryContainer.arguments = ["I'm job2!"]

          let jobA = new Job("job-a", "debian:latest", event)
          jobA.primaryContainer.command = ["echo"]
          jobA.primaryContainer.arguments = ["I'm job A!"]

          let jobB = new Job("job-b", "debian:latest", event)
          jobB.primaryContainer.command = ["echo"]
          jobB.primaryContainer.arguments = ["I'm job B!"]

          await new ConcurrentGroup(
            new SerialGroup(job1, job2),
            new SerialGroup(jobA, jobB)
          ).run()
        })

        events.process()